It appears that I'll need to modify pass-merge to allow collapsing;
one method would be to macrolet table-pass so that any calls to it
inside the body would just define bindings and execute them;
pass-collapse would be --- this may not work


**** OLD
The transformations are designed as follows:

pass-merge merges parallel passes over a table into a single pass when
possible.

pass-collapse collapses passes over tables which are themselves
reductions of other tables into a single pass when possible.  If the
other table is available (and presumably the other reductions), then
this is not necessary.  However: if another pass on the source table
is necessary, then it may make more sense to generate the reduction
during the source pass then to do two passes.  The compromise in
question is the complexity of per-source-row computations x source
nrows vs. the load time per-reduction-row x reduction nrows.

(technically pass-merge and pass-collapse are just two different ways
of merging passes, so I may change the names)

The pipeline order is:

1. lrestrans, as it is used as the backbone for logical tables.

2. pass-merge

3. pass-collapse.  pass-merge output is just another table-pass, so
   collapsing should be fairly simple
