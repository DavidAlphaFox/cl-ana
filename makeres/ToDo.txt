+ Add restarts to compres-generated functions which allow for retrying
  a result, skipping a result, aborting, or halt & store results in
  the target-table.

+ Allow users to specify an update strategy for re-specifying targets
  (i.e. executing defres).  For now I've set the default to keeping
  the old value in place but setting the status to nil ("needs to be
  computed")

- Test various graph transformations

  Of special interest is the collapsing of table passes.  Approach:
  Use new form (tabred table bindings &body body) which will be
  interpreted as executing body inside a loop over table with bindings
  declared outside the loop.  These bindings can be collapsed into a
  single let/let*, and the bodies can be executed in parallel as long
  as there are no interdependencies.  If there are interdependencies,
  then more than one pass will be required, but this same strategy can
  be applied to all the results which depend on first pass values, so
  that second pass values happen in a single second pass, and so on.

+ Unify makeres and logres into a single framework which would allow
  for target-wise loading/saving as well as batch load and save.  At
  present, the entire project gets loaded into memory, which I believe
  causes issues with my laptop (only has 2 GB memory).  It would be
  nice to be able to do analysis on machines with low memory as well.

  This will involve rewriting the res macro so that it checks to see
  if a result is loaded first, then either loads and returns or simply
  returns a result.

+ Edit projects in-place.  This is necessary if we allow single target
  load/save independently.  Make it easy to backup a project though
  for safety.  Version control is most likely infeasible due to the
  size of results.

+ Don't delete work directory every time we load/save, just delete
  content.

- Handle non-present parameters and targets by printing a warning
  instead of failing

- Save & load parameters as well.  May inspire improved parameter
  handling in makeres (e.g. remembering last settings if no new values
  are given and having a reset argument for restoring default
  parameter values).  This is critical since running makeres always
  recomputes everything if non-default parameter values were used.

- When loading parameters: Update last-param values to be the same as
  the loaded parameters in addition to setting the current parameter
  values (if applicable).

- It may even make sense to run (makeres <param values>) after loading
  everything so that any results unable to be stored can be
  recomputed; can make this optional behavior to be safe.

  I'm letting the user do this for now.

  It's an option that should be present once makeres, logres etc. are
  unified into a single framework.
