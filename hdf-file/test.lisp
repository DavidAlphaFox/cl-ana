(in-package :hdf-file)

(defvar *file*)
(defvar *status*)
(defvar *rank* 1)

(defun test (filename)
  (with-foreign-string (dataset-name "dataset")
    (with-foreign-objects ((dim :int 2)
			   (maxdim :int 2)
			   (chunkdim :int 2)
			   (dataspace 'hid-t)
			   (dataset 'hid-t)
			   (memspace 'hid-t)
			   (cparms 'hid-t))
      (setf (mem-aref dim :int 0) 5)
      (format t "dim: ~a~%" (mem-aref dim :int 0))
      ;;(setf (mem-aref maxdim :int 0) -1)
      (setf (mem-aref maxdim :int 0) 100)
      (setf (mem-aref chunkdim :int 0) 1)
      (format t "maxdim: ~a~%" (mem-aref maxdim :int 0))
      (with-open-hdf-file (file filename :direction :output :if-exists :supersede)
	(setf *file* file)
	(setf cparms (h5pcreate h5p-dataset-create))
	(h5pset-chunk cparms *rank* chunkdim)
	(setf dataspace (h5screate-simple *rank* dim maxdim))
	(setf dataset (h5dcreate1
		       file
		       dataset-name
		       h5t-native-int
		       dataspace
		       cparms))
	(format t "dataspace: ~a~%" dataspace)
	(format t "dataset: ~a~%" dataset)
	(with-foreign-object (data :int 5)
	  (loop for i from 0 to 4 do (setf (mem-aref data :int i) (* i i)))
	  (setf memspace (h5screate-simple *rank* dim maxdim))
	  (h5dwrite dataset h5t-native-int memspace dataspace h5p-default data)
	  (h5dclose dataset)
	  (h5sclose memspace)
	  (h5sclose dataspace))))))
